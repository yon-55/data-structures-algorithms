using System;
using System.Collections.Generic;

public class Graph
{
    public Dictionary<string, List<string>> AdjacencyList { get; private set; }

    public Graph()
    {
        AdjacencyList = new Dictionary<string, List<string>>();
    }

    // Add an undirected edge between two nodes
    public void AddEdge(string node1, string node2)
    {
        if (!AdjacencyList.ContainsKey(node1))
        {
            AdjacencyList[node1] = new List<string>();
        }
        if (!AdjacencyList.ContainsKey(node2))
        {
            AdjacencyList[node2] = new List<string>();
        }

        AdjacencyList[node1].Add(node2); // Add edge from node1 to node2
        AdjacencyList[node2].Add(node1); // Add edge from node2 to node1 (undirected)
    }
}

public class WeightedGraph
{
    public Dictionary<string, List<(string, int)>> WeightedAdjacencyList { get; private set; }

    public WeightedGraph()
    {
        WeightedAdjacencyList = new Dictionary<string, List<(string, int)>>();
    }

    // Add a weighted edge between two nodes
    public void AddEdge(string node1, string node2, int weight)
    {
        if (!WeightedAdjacencyList.ContainsKey(node1))
        {
            WeightedAdjacencyList[node1] = new List<(string, int)>();
        }
        if (!WeightedAdjacencyList.ContainsKey(node2))
        {
            WeightedAdjacencyList[node2] = new List<(string, int)>();
        }

        WeightedAdjacencyList[node1].Add((node2, weight)); // Add weighted edge from node1 to node2
        WeightedAdjacencyList[node2].Add((node1, weight)); // Add weighted edge from node2 to node1 (undirected)
    }
}

// BFT Algorithm for Unweighted Graph
public class BFTAlgorithm
{
    public static double FindInfluenceScore(Graph graph, string startNode)
    {
        // Breadth-First Traversal to calculate shortest path distances
        Dictionary<string, int> distances = new Dictionary<string, int>();
        Queue<string> queue = new Queue<string>();

        // Initialize distances
        foreach (var node in graph.AdjacencyList.Keys)
        {
            distances[node] = int.MaxValue;
        }

        distances[startNode] = 0;
        queue.Enqueue(startNode);

        while (queue.Count > 0)
        {
            string current = queue.Dequeue();
            foreach (var neighbor in graph.AdjacencyList[current])
            {
                if (distances[neighbor] == int.MaxValue)
                {
                    distances[neighbor] = distances[current] + 1;
                    queue.Enqueue(neighbor);
                }
            }
        }

        // Calculate the influence score
        double sumOfDistances = 0;
        int nodeCount = graph.AdjacencyList.Count;
        foreach (var distance in distances.Values)
        {
            if (distance != int.MaxValue)
            {
                sumOfDistances += distance;
            }
        }

        return (nodeCount - 1) / sumOfDistances;
    }
}

// Dijkstra's Algorithm for Weighted Graph
public class DijkstraAlgorithm
{
    public static double ComputeInfluenceScore(WeightedGraph graph, string startNode)
    {
        // Dijkstra's algorithm to calculate shortest path distances
        Dictionary<string, int> distances = new Dictionary<string, int>();
        PriorityQueue<string, int> priorityQueue = new PriorityQueue<string, int>();

        foreach (var node in graph.WeightedAdjacencyList.Keys)
        {
            distances[node] = int.MaxValue;
        }

        distances[startNode] = 0;
        priorityQueue.Enqueue(startNode, 0);

        while (priorityQueue.Count > 0)
        {
            string current = priorityQueue.Dequeue();
            foreach (var (neighbor, weight) in graph.WeightedAdjacencyList[current])
            {
                int newDist = distances[current] + weight;
                if (newDist < distances[neighbor])
                {
                    distances[neighbor] = newDist;
                    priorityQueue.Enqueue(neighbor, newDist);
                }
            }
        }

        // Calculate the influence score
        double sumOfDistances = 0;
        int nodeCount = graph.WeightedAdjacencyList.Count;
        foreach (var distance in distances.Values)
        {
            if (distance != int.MaxValue)
            {
                sumOfDistances += distance;
            }
        }

        return (nodeCount - 1) / sumOfDistances;
    }
}



class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Choose graph type:");
        Console.WriteLine("1. Unweighted Graph");
        Console.WriteLine("2. Weighted Graph");
        Console.Write("Enter your choice (1 or 2): ");
        int choice = int.Parse(Console.ReadLine());
        

        if (choice == 1)
        {
            RunUnweightedGraphExample();
        }
        else if (choice == 2)
        {
            RunWeightedGraphExample();
        }
        else
        {
            Console.WriteLine("Invalid choice. Exiting program.");
        }
    }

    static void RunUnweightedGraphExample()
    {
        Console.WriteLine("\n--- Unweighted Graph Example ---");

        // Create the unweighted graph
        Graph graph = new Graph();
        graph.AddEdge("Alicia", "Britney");
        graph.AddEdge("Britney", "Claire");
        graph.AddEdge("Claire", "Diana");
        graph.AddEdge("Diana", "Edward");
        graph.AddEdge("Diana", "Harry");
        graph.AddEdge("Edward", "Harry");
        graph.AddEdge("Edward", "Gloria");
        graph.AddEdge("Edward", "Fred");
        graph.AddEdge("Gloria", "Fred");
        graph.AddEdge("Harry", "Gloria");

        // Display the graph
        Console.WriteLine("Nodes in the graph:");
        foreach (var graphNode in graph.AdjacencyList.Keys)
        {
            Console.WriteLine($"- {graphNode}");
        }

        // Calculate the influence score for a specific node
        Console.Write("Enter the node to calculate the influence score: ");
        string node = Console.ReadLine();

        if (!graph.AdjacencyList.ContainsKey(node))
        {
            Console.WriteLine($"Node {node} does not exist in the graph.");
        }
        else
        {
            double influenceScore = BFTAlgorithm.FindInfluenceScore(graph, node);
            Console.WriteLine($"Influence score for node {node}: {influenceScore:F2}");
        }
    }

    static void RunWeightedGraphExample()
    {
        Console.WriteLine("\n--- Weighted Graph Example ---");

        // Create the weighted graph
        WeightedGraph graph = new WeightedGraph();
        graph.AddEdge("A", "B", 1);
        graph.AddEdge("A", "C", 1);
        graph.AddEdge("A", "E", 5);
        graph.AddEdge("B", "C", 4);
        graph.AddEdge("B", "E", 1);
        graph.AddEdge("B", "G", 1);
        graph.AddEdge("B", "H", 1);
        graph.AddEdge("C", "D", 3);
        graph.AddEdge("C", "E", 1);
        graph.AddEdge("D", "E", 2);
        graph.AddEdge("D", "F", 1);
        graph.AddEdge("D", "G", 5);
        graph.AddEdge("E", "G", 2);
        graph.AddEdge("F", "G", 1);
        graph.AddEdge("G", "H", 2);
        graph.AddEdge("H", "I", 3);
        graph.AddEdge("I", "J", 3);

        // Display the graph
        Console.WriteLine("Nodes in the graph:");
        foreach (var graphNode in graph.WeightedAdjacencyList.Keys)
        {
            Console.WriteLine($"- {graphNode}");
        }

        // Calculate the influence score for a specific node
        Console.Write("Enter the node to calculate the influence score: ");
        string node = Console.ReadLine();

        if (!graph.WeightedAdjacencyList.ContainsKey(node))
        {
            Console.WriteLine($"Node {node} does not exist in the graph.");
        }
        else
        {
            double influenceScore = DijkstraAlgorithm.ComputeInfluenceScore(graph, node);
            Console.WriteLine($"Influence score for node {node}: {influenceScore:F2}");
        }
    }
}
