using System;
using System.Collections.Generic;

class RatInMaze
{
    // Directions for moving (north, south, east, west, northwest, northeast, southwest, southeast)
    static readonly int[] dx = { 0, 0, 1, -1, -1, 1, -1, 1 };
    static readonly int[] dy = { 1, -1, 0, 0, 1, 1, -1, -1 };

    static int rows, cols;
    static int[,] maze;
    static bool[,] visited;

    
    static void InitialiseMaze()// Initialise the maze with 0 (open path) and 1 (wall)
    {
        maze = new int[rows, cols];
        visited = new bool[rows, cols];


        // 0 = path, 1 = wall
        maze[1, 0] = 0; maze[1, 1] = 0; maze[1, 2] = 1; maze[1, 3] = 1; maze[1, 4] = 1; maze[1, 5] = 0;
        maze[2, 0] = 0; maze[2, 1] = 1; maze[2, 2] = 0; maze[2, 3] = 1; maze[2, 4] = 0; maze[2, 5] = 0;
        maze[3, 0] = 1; maze[3, 1] = 1; maze[3, 2] = 0; maze[3, 3] = 1; maze[3, 4] = 1; maze[3, 5] = 0;
        maze[4, 0] = 0; maze[4, 1] = 0; maze[4, 2] = 1; maze[4, 3] = 0; maze[4, 4] = 0; maze[4, 5] = 0;
        maze[5, 0] = 1; maze[5, 1] = 1; maze[5, 2] = 1; maze[5, 3] = 1; maze[5, 4] = 0; maze[5, 5] = 0;
        // Mark all cells as not visited initially
        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                visited[i, j] = false;
            }
        }
    }

    // Check if the move valid
    static bool IsValidMove(int x, int y)
    {
        return x >= 0 && x < rows && y >= 0 && y < cols && maze[x, y] == 0 && !visited[x, y];
    }

    // DFS to find path to the exit
    static bool SolveMaze(int x, int y, List<Tuple<int, int>> path)
    {
        // If the exit is found
        if (x == rows - 1 && y == cols - 1)
        {
            path.Add(new Tuple<int, int>(x, y));
            return true;
        }

        // Mark the current cell as visited
        visited[x, y] = true;
        path.Add(new Tuple<int, int>(x, y));

        // Explore all 8 directions
        for (int i = 0; i < 8; i++)
        {
            int newX = x + dx[i];
            int newY = y + dy[i];

            if (IsValidMove(newX, newY) && SolveMaze(newX, newY, path))
            {
                return true;
            }
        }

        // Backtrack if no path found
        path.RemoveAt(path.Count - 1);
        return false;
    }

    // Print the maze
    static void PrintMaze()
    {
        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                Console.Write(maze[i, j] + " ");
            }
            Console.WriteLine();
        }
    }

    // Print the path
    static void PrintPath(List<Tuple<int, int>> path)
    {
        Console.WriteLine("Path to the exit:");
        foreach (var step in path)
        {
            Console.WriteLine($"({step.Item1}, {step.Item2})");
        }
    }

    static void Main()
    {
        // Set the maze dimensions
        rows = 6;
        cols = 6;

        // Initialise the maze
        InitialiseMaze();

        // Print the maze
        Console.WriteLine("Maze:");
        PrintMaze();

        // Solve the maze using DFS
        List<Tuple<int, int>> path = new List<Tuple<int, int>>();
        bool result = SolveMaze(0, 0, path); // Start at (0, 0)

        // Output result
        if (result)
        {
            PrintPath(path); // Print the solution path
        }
        else
        {
            Console.WriteLine("No solution exists.");
        }
    }
}
